
/**************************************************
* auto generated by reflection system
**************************************************/

#include <Archive.hpp>
#include "../Ray.hpp" 
#include "../Animator.hpp" 
#include "../Animator.hpp" 
#include "../Quaternion.hpp" 
#include "../Object.hpp" 
#include "../Collider.hpp" 
#include "../Animator.hpp" 
#include "../CameraController.hpp" 
#include "../Material.hpp" 
#include "../ShaderCompiler.hpp" 
#include "../MeshFilter.hpp" 
#include "../BoxCollider.hpp" 
#include "../Animator.hpp" 
#include "../Texture.hpp" 
#include "../Shader.hpp" 
#include "../Texture.hpp" 
#include "../Matrix4x4.hpp" 
#include "../Rigidbody.hpp" 
#include "../Animator.hpp" 
#include "../Component.hpp" 
#include "../Behaviour.hpp" 
#include "../Skybox.hpp" 
#include "../ShaderProperty.hpp" 
#include "../CapsuleCollider.hpp" 
#include "../Mesh.hpp" 
#include "../Renderer.hpp" 
#include "../Animator.hpp" 
#include "../Material.hpp" 
#include "../SkinnedMeshRenderer.hpp" 
#include "../SphereCollider.hpp" 
#include "../Mesh.hpp" 
#include "../Vector2.hpp" 
#include "../Vector3.hpp" 
#include "../Vector4.hpp" 
#include "../Bounds.hpp" 
#include "../ShaderProperty.hpp" 
#include "../Color.hpp" 
#include "../Light.hpp" 
#include "../Texture2D.hpp" 
#include "../Avatar.hpp" 
#include "../Script.hpp" 
#include "../IntVector.hpp" 
#include "../Frustum.hpp" 
#include "../IntVector.hpp" 
#include "../IntVector.hpp" 
#include "../Camera.hpp" 
#include "../Scene.hpp" 
#include "../MeshRenderer.hpp" 
#include "../Transform.hpp" 
#include "../GameObject.hpp" 

namespace FishEngine
{
  
	// FishEngine::Ray
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Ray const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("origin", value.origin); // FishEngine::Vector3
		archive << FishEngine::make_nvp("direction", value.direction); // FishEngine::Vector3
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Ray & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("origin", value.origin); // FishEngine::Vector3
		archive >> FishEngine::make_nvp("direction", value.direction); // FishEngine::Vector3
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::QuaternionKey
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::QuaternionKey const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("time", value.time); // float
		archive << FishEngine::make_nvp("value", value.value); // FishEngine::Quaternion
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::QuaternionKey & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("time", value.time); // float
		archive >> FishEngine::make_nvp("value", value.value); // FishEngine::Quaternion
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::TransformationKey
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::TransformationKey const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("time", value.time); // float
		archive << FishEngine::make_nvp("value", value.value); // FishEngine::Matrix4x4
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::TransformationKey & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("time", value.time); // float
		archive >> FishEngine::make_nvp("value", value.value); // FishEngine::Matrix4x4
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Quaternion
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Quaternion const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("x", value.x); // float
		archive << FishEngine::make_nvp("y", value.y); // float
		archive << FishEngine::make_nvp("z", value.z); // float
		archive << FishEngine::make_nvp("w", value.w); // float
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Quaternion & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("x", value.x); // float
		archive >> FishEngine::make_nvp("y", value.y); // float
		archive >> FishEngine::make_nvp("z", value.z); // float
		archive >> FishEngine::make_nvp("w", value.w); // float
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Object
	void FishEngine::Object::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		archive << FishEngine::make_nvp("m_hideFlags", m_hideFlags); // FishEngine::HideFlags
		archive << FishEngine::make_nvp("m_name", m_name); // std::string
		//archive.EndClass();
	}

	void FishEngine::Object::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		archive >> FishEngine::make_nvp("m_hideFlags", m_hideFlags); // FishEngine::HideFlags
		archive >> FishEngine::make_nvp("m_name", m_name); // std::string
		//archive.EndClass();
	}

  
	// FishEngine::Collider
	void FishEngine::Collider::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Component::Serialize(archive);
		archive << FishEngine::make_nvp("m_contactOffset", m_contactOffset); // float
		archive << FishEngine::make_nvp("m_enabled", m_enabled); // bool
		archive << FishEngine::make_nvp("m_isTrigger", m_isTrigger); // bool
		//archive.EndClass();
	}

	void FishEngine::Collider::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Component::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_contactOffset", m_contactOffset); // float
		archive >> FishEngine::make_nvp("m_enabled", m_enabled); // bool
		archive >> FishEngine::make_nvp("m_isTrigger", m_isTrigger); // bool
		//archive.EndClass();
	}

  
	// FishEngine::Animator
	void FishEngine::Animator::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Component::Serialize(archive);
		archive << FishEngine::make_nvp("m_time", m_time); // float
		archive << FishEngine::make_nvp("m_playing", m_playing); // bool
		archive << FishEngine::make_nvp("m_playingOnce", m_playingOnce); // bool
		archive << FishEngine::make_nvp("m_playOneFrame", m_playOneFrame); // bool
		archive << FishEngine::make_nvp("m_currentFrame", m_currentFrame); // int
		archive << FishEngine::make_nvp("m_avatar", m_avatar); // AvatarPtr
		archive << FishEngine::make_nvp("m_nameToGameObject", m_nameToGameObject); // std::map<std::string, std::weak_ptr<GameObject> >
		//archive.EndClass();
	}

	void FishEngine::Animator::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Component::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_time", m_time); // float
		archive >> FishEngine::make_nvp("m_playing", m_playing); // bool
		archive >> FishEngine::make_nvp("m_playingOnce", m_playingOnce); // bool
		archive >> FishEngine::make_nvp("m_playOneFrame", m_playOneFrame); // bool
		archive >> FishEngine::make_nvp("m_currentFrame", m_currentFrame); // int
		archive >> FishEngine::make_nvp("m_avatar", m_avatar); // AvatarPtr
		archive >> FishEngine::make_nvp("m_nameToGameObject", m_nameToGameObject); // std::map<std::string, std::weak_ptr<GameObject> >
		//archive.EndClass();
	}

  
	// FishEngine::CameraController
	void FishEngine::CameraController::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Script::Serialize(archive);
		archive << FishEngine::make_nvp("m_isRotating", m_isRotating); // bool
		archive << FishEngine::make_nvp("m_lookAtMode", m_lookAtMode); // bool
		archive << FishEngine::make_nvp("m_rotateSpeed", m_rotateSpeed); // float
		archive << FishEngine::make_nvp("m_dragSpeed", m_dragSpeed); // float
		archive << FishEngine::make_nvp("m_originalPosition", m_originalPosition); // FishEngine::Vector3
		archive << FishEngine::make_nvp("m_originalRotation", m_originalRotation); // FishEngine::Quaternion
		archive << FishEngine::make_nvp("m_originalScale", m_originalScale); // FishEngine::Vector3
		//archive.EndClass();
	}

	void FishEngine::CameraController::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Script::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_isRotating", m_isRotating); // bool
		archive >> FishEngine::make_nvp("m_lookAtMode", m_lookAtMode); // bool
		archive >> FishEngine::make_nvp("m_rotateSpeed", m_rotateSpeed); // float
		archive >> FishEngine::make_nvp("m_dragSpeed", m_dragSpeed); // float
		archive >> FishEngine::make_nvp("m_originalPosition", m_originalPosition); // FishEngine::Vector3
		archive >> FishEngine::make_nvp("m_originalRotation", m_originalRotation); // FishEngine::Quaternion
		archive >> FishEngine::make_nvp("m_originalScale", m_originalScale); // FishEngine::Vector3
		//archive.EndClass();
	}

  
	// FishEngine::Material
	void FishEngine::Material::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Object::Serialize(archive);
		archive << FishEngine::make_nvp("m_shader", m_shader); // ShaderPtr
		archive << FishEngine::make_nvp("m_textures", m_textures); // std::map<std::string, TexturePtr>
		archive << FishEngine::make_nvp("m_uniforms", m_uniforms); // FishEngine::ShaderUniforms
		archive << FishEngine::make_nvp("m_properties", m_properties); // std::vector<MaterialProperty>
		//archive.EndClass();
	}

	void FishEngine::Material::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Object::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_shader", m_shader); // ShaderPtr
		archive >> FishEngine::make_nvp("m_textures", m_textures); // std::map<std::string, TexturePtr>
		archive >> FishEngine::make_nvp("m_uniforms", m_uniforms); // FishEngine::ShaderUniforms
		archive >> FishEngine::make_nvp("m_properties", m_properties); // std::vector<MaterialProperty>
		//archive.EndClass();
	}

  
	// FishEngine::ShaderCompiler
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::ShaderCompiler const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("m_hasGeometryShader", value.m_hasGeometryShader); // bool
		archive << FishEngine::make_nvp("m_settings", value.m_settings); // std::map<std::string, std::string>
		archive << FishEngine::make_nvp("m_error", value.m_error); // FishEngine::ShaderCompilerErrorCode
		archive << FishEngine::make_nvp("m_errorString", value.m_errorString); // std::string
		archive << FishEngine::make_nvp("m_path", value.m_path); // Path
		archive << FishEngine::make_nvp("m_includeDepth", value.m_includeDepth); // uint32_t
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::ShaderCompiler & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("m_hasGeometryShader", value.m_hasGeometryShader); // bool
		archive >> FishEngine::make_nvp("m_settings", value.m_settings); // std::map<std::string, std::string>
		archive >> FishEngine::make_nvp("m_error", value.m_error); // FishEngine::ShaderCompilerErrorCode
		archive >> FishEngine::make_nvp("m_errorString", value.m_errorString); // std::string
		archive >> FishEngine::make_nvp("m_path", value.m_path); // Path
		archive >> FishEngine::make_nvp("m_includeDepth", value.m_includeDepth); // uint32_t
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::MeshFilter
	void FishEngine::MeshFilter::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Component::Serialize(archive);
		archive << FishEngine::make_nvp("m_mesh", m_mesh); // MeshPtr
		//archive.EndClass();
	}

	void FishEngine::MeshFilter::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Component::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_mesh", m_mesh); // MeshPtr
		//archive.EndClass();
	}

  
	// FishEngine::BoxCollider
	void FishEngine::BoxCollider::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Collider::Serialize(archive);
		archive << FishEngine::make_nvp("m_center", m_center); // FishEngine::Vector3
		archive << FishEngine::make_nvp("m_size", m_size); // FishEngine::Vector3
		//archive.EndClass();
	}

	void FishEngine::BoxCollider::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Collider::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_center", m_center); // FishEngine::Vector3
		archive >> FishEngine::make_nvp("m_size", m_size); // FishEngine::Vector3
		//archive.EndClass();
	}

  
	// FishEngine::AnimationNode
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::AnimationNode const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("name", value.name); // std::string
		archive << FishEngine::make_nvp("positionKeys", value.positionKeys); // std::vector<Vector3Key>
		archive << FishEngine::make_nvp("rotationKeys", value.rotationKeys); // std::vector<QuaternionKey>
		archive << FishEngine::make_nvp("scalingKeys", value.scalingKeys); // std::vector<Vector3Key>
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::AnimationNode & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("name", value.name); // std::string
		archive >> FishEngine::make_nvp("positionKeys", value.positionKeys); // std::vector<Vector3Key>
		archive >> FishEngine::make_nvp("rotationKeys", value.rotationKeys); // std::vector<QuaternionKey>
		archive >> FishEngine::make_nvp("scalingKeys", value.scalingKeys); // std::vector<Vector3Key>
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Cubemap
	void FishEngine::Cubemap::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Texture::Serialize(archive);
		archive << FishEngine::make_nvp("m_format", m_format); // FishEngine::TextureFormat
		archive << FishEngine::make_nvp("m_mipmapCount", m_mipmapCount); // uint32_t
		//archive.EndClass();
	}

	void FishEngine::Cubemap::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Texture::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_format", m_format); // FishEngine::TextureFormat
		archive >> FishEngine::make_nvp("m_mipmapCount", m_mipmapCount); // uint32_t
		//archive.EndClass();
	}

  
	// FishEngine::Shader
	void FishEngine::Shader::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Object::Serialize(archive);
		archive << FishEngine::make_nvp("m_uniforms", m_uniforms); // std::vector<UniformInfo>
		archive << FishEngine::make_nvp("m_cullface", m_cullface); // FishEngine::Cullface
		archive << FishEngine::make_nvp("m_ZWrite", m_ZWrite); // bool
		archive << FishEngine::make_nvp("m_blend", m_blend); // bool
		archive << FishEngine::make_nvp("m_deferred", m_deferred); // bool
		archive << FishEngine::make_nvp("m_keywords", m_keywords); // ShaderKeywords
		//archive.EndClass();
	}

	void FishEngine::Shader::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Object::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_uniforms", m_uniforms); // std::vector<UniformInfo>
		archive >> FishEngine::make_nvp("m_cullface", m_cullface); // FishEngine::Cullface
		archive >> FishEngine::make_nvp("m_ZWrite", m_ZWrite); // bool
		archive >> FishEngine::make_nvp("m_blend", m_blend); // bool
		archive >> FishEngine::make_nvp("m_deferred", m_deferred); // bool
		archive >> FishEngine::make_nvp("m_keywords", m_keywords); // ShaderKeywords
		//archive.EndClass();
	}

  
	// FishEngine::Texture
	void FishEngine::Texture::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Object::Serialize(archive);
		archive << FishEngine::make_nvp("m_height", m_height); // uint32_t
		archive << FishEngine::make_nvp("m_width", m_width); // uint32_t
		archive << FishEngine::make_nvp("m_anisoLevel", m_anisoLevel); // int
		archive << FishEngine::make_nvp("m_dimension", m_dimension); // FishEngine::TextureDimension
		archive << FishEngine::make_nvp("m_filterMode", m_filterMode); // FishEngine::FilterMode
		archive << FishEngine::make_nvp("m_wrapMode", m_wrapMode); // FishEngine::TextureWrapMode
		//archive.EndClass();
	}

	void FishEngine::Texture::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Object::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_height", m_height); // uint32_t
		archive >> FishEngine::make_nvp("m_width", m_width); // uint32_t
		archive >> FishEngine::make_nvp("m_anisoLevel", m_anisoLevel); // int
		archive >> FishEngine::make_nvp("m_dimension", m_dimension); // FishEngine::TextureDimension
		archive >> FishEngine::make_nvp("m_filterMode", m_filterMode); // FishEngine::FilterMode
		archive >> FishEngine::make_nvp("m_wrapMode", m_wrapMode); // FishEngine::TextureWrapMode
		//archive.EndClass();
	}

  
	// FishEngine::Matrix4x4
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Matrix4x4 const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("rows[0]", value.rows[0]); // FishEngine::Vector4
		archive << FishEngine::make_nvp("rows[1]", value.rows[1]); // FishEngine::Vector4
		archive << FishEngine::make_nvp("rows[2]", value.rows[2]); // FishEngine::Vector4
		archive << FishEngine::make_nvp("rows[3]", value.rows[3]); // FishEngine::Vector4
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Matrix4x4 & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("rows[0]", value.rows[0]); // FishEngine::Vector4
		archive >> FishEngine::make_nvp("rows[1]", value.rows[1]); // FishEngine::Vector4
		archive >> FishEngine::make_nvp("rows[2]", value.rows[2]); // FishEngine::Vector4
		archive >> FishEngine::make_nvp("rows[3]", value.rows[3]); // FishEngine::Vector4
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Rigidbody
	void FishEngine::Rigidbody::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Component::Serialize(archive);
		archive << FishEngine::make_nvp("m_mass", m_mass); // float
		archive << FishEngine::make_nvp("m_drag", m_drag); // float
		archive << FishEngine::make_nvp("m_angularDrag", m_angularDrag); // float
		archive << FishEngine::make_nvp("m_useGravity", m_useGravity); // bool
		archive << FishEngine::make_nvp("m_isKinematic", m_isKinematic); // bool
		archive << FishEngine::make_nvp("m_velocity", m_velocity); // FishEngine::Vector3
		//archive.EndClass();
	}

	void FishEngine::Rigidbody::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Component::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_mass", m_mass); // float
		archive >> FishEngine::make_nvp("m_drag", m_drag); // float
		archive >> FishEngine::make_nvp("m_angularDrag", m_angularDrag); // float
		archive >> FishEngine::make_nvp("m_useGravity", m_useGravity); // bool
		archive >> FishEngine::make_nvp("m_isKinematic", m_isKinematic); // bool
		archive >> FishEngine::make_nvp("m_velocity", m_velocity); // FishEngine::Vector3
		//archive.EndClass();
	}

  
	// FishEngine::Vector3Key
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Vector3Key const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("time", value.time); // float
		archive << FishEngine::make_nvp("value", value.value); // FishEngine::Vector3
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Vector3Key & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("time", value.time); // float
		archive >> FishEngine::make_nvp("value", value.value); // FishEngine::Vector3
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Component
	void FishEngine::Component::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Object::Serialize(archive);
		archive << FishEngine::make_nvp("m_gameObject", m_gameObject); // std::weak_ptr<GameObject>
		//archive.EndClass();
	}

	void FishEngine::Component::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Object::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_gameObject", m_gameObject); // std::weak_ptr<GameObject>
		//archive.EndClass();
	}

  
	// FishEngine::Behaviour
	void FishEngine::Behaviour::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Component::Serialize(archive);
		archive << FishEngine::make_nvp("m_enabled", m_enabled); // bool
		//archive.EndClass();
	}

	void FishEngine::Behaviour::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Component::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_enabled", m_enabled); // bool
		//archive.EndClass();
	}

  
	// FishEngine::Skybox
	void FishEngine::Skybox::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Behaviour::Serialize(archive);
		archive << FishEngine::make_nvp("m_material", m_material); // MaterialPtr
		//archive.EndClass();
	}

	void FishEngine::Skybox::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Behaviour::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_material", m_material); // MaterialPtr
		//archive.EndClass();
	}

  
	// FishEngine::ShaderUniforms
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::ShaderUniforms const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("mat4s", value.mat4s); // std::map<std::string, Matrix4x4>
		archive << FishEngine::make_nvp("vec2s", value.vec2s); // std::map<std::string, Vector2>
		archive << FishEngine::make_nvp("vec3s", value.vec3s); // std::map<std::string, Vector3>
		archive << FishEngine::make_nvp("vec4s", value.vec4s); // std::map<std::string, Vector4>
		archive << FishEngine::make_nvp("floats", value.floats); // std::map<std::string, float>
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::ShaderUniforms & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("mat4s", value.mat4s); // std::map<std::string, Matrix4x4>
		archive >> FishEngine::make_nvp("vec2s", value.vec2s); // std::map<std::string, Vector2>
		archive >> FishEngine::make_nvp("vec3s", value.vec3s); // std::map<std::string, Vector3>
		archive >> FishEngine::make_nvp("vec4s", value.vec4s); // std::map<std::string, Vector4>
		archive >> FishEngine::make_nvp("floats", value.floats); // std::map<std::string, float>
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::CapsuleCollider
	void FishEngine::CapsuleCollider::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Collider::Serialize(archive);
		archive << FishEngine::make_nvp("m_center", m_center); // FishEngine::Vector3
		archive << FishEngine::make_nvp("m_direction", m_direction); // int
		archive << FishEngine::make_nvp("m_height", m_height); // float
		archive << FishEngine::make_nvp("m_radius", m_radius); // float
		//archive.EndClass();
	}

	void FishEngine::CapsuleCollider::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Collider::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_center", m_center); // FishEngine::Vector3
		archive >> FishEngine::make_nvp("m_direction", m_direction); // int
		archive >> FishEngine::make_nvp("m_height", m_height); // float
		archive >> FishEngine::make_nvp("m_radius", m_radius); // float
		//archive.EndClass();
	}

  
	// FishEngine::Mesh
	void FishEngine::Mesh::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Object::Serialize(archive);
		archive << FishEngine::make_nvp("m_skinned", m_skinned); // bool
		archive << FishEngine::make_nvp("m_vertices", m_vertices); // std::vector<Vector3>
		archive << FishEngine::make_nvp("m_normals", m_normals); // std::vector<Vector3>
		archive << FishEngine::make_nvp("m_uv", m_uv); // std::vector<Vector2>
		archive << FishEngine::make_nvp("m_tangents", m_tangents); // std::vector<Vector3>
		archive << FishEngine::make_nvp("m_triangles", m_triangles); // std::vector<uint32_t>
		archive << FishEngine::make_nvp("m_bindposes", m_bindposes); // std::vector<Matrix4x4>
		archive << FishEngine::make_nvp("m_boneNames", m_boneNames); // std::vector<std::string>
		archive << FishEngine::make_nvp("m_bones", m_bones); // std::vector<std::weak_ptr<Transform> >
		archive << FishEngine::make_nvp("m_isReadable", m_isReadable); // bool
		archive << FishEngine::make_nvp("m_uploaded", m_uploaded); // bool
		archive << FishEngine::make_nvp("m_vertexCount", m_vertexCount); // uint32_t
		archive << FishEngine::make_nvp("m_triangleCount", m_triangleCount); // uint32_t
		archive << FishEngine::make_nvp("m_bounds", m_bounds); // FishEngine::Bounds
		//archive.EndClass();
	}

	void FishEngine::Mesh::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Object::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_skinned", m_skinned); // bool
		archive >> FishEngine::make_nvp("m_vertices", m_vertices); // std::vector<Vector3>
		archive >> FishEngine::make_nvp("m_normals", m_normals); // std::vector<Vector3>
		archive >> FishEngine::make_nvp("m_uv", m_uv); // std::vector<Vector2>
		archive >> FishEngine::make_nvp("m_tangents", m_tangents); // std::vector<Vector3>
		archive >> FishEngine::make_nvp("m_triangles", m_triangles); // std::vector<uint32_t>
		archive >> FishEngine::make_nvp("m_bindposes", m_bindposes); // std::vector<Matrix4x4>
		archive >> FishEngine::make_nvp("m_boneNames", m_boneNames); // std::vector<std::string>
		archive >> FishEngine::make_nvp("m_bones", m_bones); // std::vector<std::weak_ptr<Transform> >
		archive >> FishEngine::make_nvp("m_isReadable", m_isReadable); // bool
		archive >> FishEngine::make_nvp("m_uploaded", m_uploaded); // bool
		archive >> FishEngine::make_nvp("m_vertexCount", m_vertexCount); // uint32_t
		archive >> FishEngine::make_nvp("m_triangleCount", m_triangleCount); // uint32_t
		archive >> FishEngine::make_nvp("m_bounds", m_bounds); // FishEngine::Bounds
		//archive.EndClass();
	}

  
	// FishEngine::Renderer
	void FishEngine::Renderer::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Component::Serialize(archive);
		archive << FishEngine::make_nvp("m_enabled", m_enabled); // bool
		archive << FishEngine::make_nvp("m_materials", m_materials); // std::vector<MaterialPtr>
		archive << FishEngine::make_nvp("m_shadowCastingMode", m_shadowCastingMode); // FishEngine::ShadowCastingMode
		archive << FishEngine::make_nvp("m_receiveShadows", m_receiveShadows); // bool
		//archive.EndClass();
	}

	void FishEngine::Renderer::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Component::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_enabled", m_enabled); // bool
		archive >> FishEngine::make_nvp("m_materials", m_materials); // std::vector<MaterialPtr>
		archive >> FishEngine::make_nvp("m_shadowCastingMode", m_shadowCastingMode); // FishEngine::ShadowCastingMode
		archive >> FishEngine::make_nvp("m_receiveShadows", m_receiveShadows); // bool
		//archive.EndClass();
	}

  
	// FishEngine::AnimationChannel
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::AnimationChannel const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("name", value.name); // std::string
		archive << FishEngine::make_nvp("duration", value.duration); // float
		archive << FishEngine::make_nvp("ticksPerSecond", value.ticksPerSecond); // float
		archive << FishEngine::make_nvp("channels", value.channels); // std::map<std::string, AnimationNode>
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::AnimationChannel & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("name", value.name); // std::string
		archive >> FishEngine::make_nvp("duration", value.duration); // float
		archive >> FishEngine::make_nvp("ticksPerSecond", value.ticksPerSecond); // float
		archive >> FishEngine::make_nvp("channels", value.channels); // std::map<std::string, AnimationNode>
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::MaterialProperty
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::MaterialProperty const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("name", value.name); // std::string
		archive << FishEngine::make_nvp("type", value.type); // FishEngine::MaterialPropertyType
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::MaterialProperty & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("name", value.name); // std::string
		archive >> FishEngine::make_nvp("type", value.type); // FishEngine::MaterialPropertyType
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::SkinnedMeshRenderer
	void FishEngine::SkinnedMeshRenderer::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Renderer::Serialize(archive);
		archive << FishEngine::make_nvp("m_sharedMesh", m_sharedMesh); // MeshPtr
		archive << FishEngine::make_nvp("m_avatar", m_avatar); // AvatarPtr
		archive << FishEngine::make_nvp("m_rootBone", m_rootBone); // std::weak_ptr<Transform>
		archive << FishEngine::make_nvp("m_bones", m_bones); // std::vector<std::weak_ptr<Transform> >
		//archive.EndClass();
	}

	void FishEngine::SkinnedMeshRenderer::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Renderer::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_sharedMesh", m_sharedMesh); // MeshPtr
		archive >> FishEngine::make_nvp("m_avatar", m_avatar); // AvatarPtr
		archive >> FishEngine::make_nvp("m_rootBone", m_rootBone); // std::weak_ptr<Transform>
		archive >> FishEngine::make_nvp("m_bones", m_bones); // std::vector<std::weak_ptr<Transform> >
		//archive.EndClass();
	}

  
	// FishEngine::SphereCollider
	void FishEngine::SphereCollider::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Collider::Serialize(archive);
		archive << FishEngine::make_nvp("m_center", m_center); // FishEngine::Vector3
		archive << FishEngine::make_nvp("m_radius", m_radius); // float
		//archive.EndClass();
	}

	void FishEngine::SphereCollider::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Collider::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_center", m_center); // FishEngine::Vector3
		archive >> FishEngine::make_nvp("m_radius", m_radius); // float
		//archive.EndClass();
	}

  
	// FishEngine::BoneWeight
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::BoneWeight const & value )
	{
		archive.BeginClass();
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::BoneWeight & value )
	{
		archive.BeginClass();
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Vector2
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Vector2 const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("x", value.x); // float
		archive << FishEngine::make_nvp("y", value.y); // float
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Vector2 & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("x", value.x); // float
		archive >> FishEngine::make_nvp("y", value.y); // float
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Vector3
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Vector3 const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("x", value.x); // float
		archive << FishEngine::make_nvp("y", value.y); // float
		archive << FishEngine::make_nvp("z", value.z); // float
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Vector3 & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("x", value.x); // float
		archive >> FishEngine::make_nvp("y", value.y); // float
		archive >> FishEngine::make_nvp("z", value.z); // float
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Vector4
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Vector4 const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("x", value.x); // float
		archive << FishEngine::make_nvp("y", value.y); // float
		archive << FishEngine::make_nvp("z", value.z); // float
		archive << FishEngine::make_nvp("w", value.w); // float
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Vector4 & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("x", value.x); // float
		archive >> FishEngine::make_nvp("y", value.y); // float
		archive >> FishEngine::make_nvp("z", value.z); // float
		archive >> FishEngine::make_nvp("w", value.w); // float
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Bounds
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Bounds const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("m_center", value.m_center); // FishEngine::Vector3
		archive << FishEngine::make_nvp("m_extents", value.m_extents); // FishEngine::Vector3
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Bounds & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("m_center", value.m_center); // FishEngine::Vector3
		archive >> FishEngine::make_nvp("m_extents", value.m_extents); // FishEngine::Vector3
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::UniformInfo
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::UniformInfo const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("type", value.type); // GLenum
		archive << FishEngine::make_nvp("name", value.name); // std::string
		archive << FishEngine::make_nvp("location", value.location); // GLuint
		archive << FishEngine::make_nvp("textureBindPoint", value.textureBindPoint); // int
		archive << FishEngine::make_nvp("binded", value.binded); // bool
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::UniformInfo & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("type", value.type); // GLenum
		archive >> FishEngine::make_nvp("name", value.name); // std::string
		archive >> FishEngine::make_nvp("location", value.location); // GLuint
		archive >> FishEngine::make_nvp("textureBindPoint", value.textureBindPoint); // int
		archive >> FishEngine::make_nvp("binded", value.binded); // bool
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Color
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Color const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("r", value.r); // float
		archive << FishEngine::make_nvp("g", value.g); // float
		archive << FishEngine::make_nvp("b", value.b); // float
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Color & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("r", value.r); // float
		archive >> FishEngine::make_nvp("g", value.g); // float
		archive >> FishEngine::make_nvp("b", value.b); // float
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Light
	void FishEngine::Light::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Behaviour::Serialize(archive);
		archive << FishEngine::make_nvp("m_type", m_type); // FishEngine::LightType
		archive << FishEngine::make_nvp("m_range", m_range); // float
		archive << FishEngine::make_nvp("m_spotAngle", m_spotAngle); // float
		archive << FishEngine::make_nvp("m_color", m_color); // FishEngine::Color
		archive << FishEngine::make_nvp("m_intensity", m_intensity); // float
		archive << FishEngine::make_nvp("m_shadowBias", m_shadowBias); // float
		archive << FishEngine::make_nvp("m_shadowNormalBias", m_shadowNormalBias); // float
		archive << FishEngine::make_nvp("m_shadowNearPlane", m_shadowNearPlane); // float
		//archive.EndClass();
	}

	void FishEngine::Light::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Behaviour::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_type", m_type); // FishEngine::LightType
		archive >> FishEngine::make_nvp("m_range", m_range); // float
		archive >> FishEngine::make_nvp("m_spotAngle", m_spotAngle); // float
		archive >> FishEngine::make_nvp("m_color", m_color); // FishEngine::Color
		archive >> FishEngine::make_nvp("m_intensity", m_intensity); // float
		archive >> FishEngine::make_nvp("m_shadowBias", m_shadowBias); // float
		archive >> FishEngine::make_nvp("m_shadowNormalBias", m_shadowNormalBias); // float
		archive >> FishEngine::make_nvp("m_shadowNearPlane", m_shadowNearPlane); // float
		//archive.EndClass();
	}

  
	// FishEngine::Texture2D
	void FishEngine::Texture2D::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Texture::Serialize(archive);
		archive << FishEngine::make_nvp("m_format", m_format); // FishEngine::TextureFormat
		archive << FishEngine::make_nvp("m_mipmapCount", m_mipmapCount); // uint32_t
		//archive.EndClass();
	}

	void FishEngine::Texture2D::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Texture::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_format", m_format); // FishEngine::TextureFormat
		archive >> FishEngine::make_nvp("m_mipmapCount", m_mipmapCount); // uint32_t
		//archive.EndClass();
	}

  
	// FishEngine::Avatar
	void FishEngine::Avatar::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Object::Serialize(archive);
		archive << FishEngine::make_nvp("m_boneToIndex", m_boneToIndex); // std::map<std::string, int>
		archive << FishEngine::make_nvp("m_indexToBone", m_indexToBone); // std::map<int, std::string>
		archive << FishEngine::make_nvp("m_matrixPalette", m_matrixPalette); // std::vector<Matrix4x4>
		//archive.EndClass();
	}

	void FishEngine::Avatar::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Object::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_boneToIndex", m_boneToIndex); // std::map<std::string, int>
		archive >> FishEngine::make_nvp("m_indexToBone", m_indexToBone); // std::map<int, std::string>
		archive >> FishEngine::make_nvp("m_matrixPalette", m_matrixPalette); // std::vector<Matrix4x4>
		//archive.EndClass();
	}

  
	// FishEngine::Script
	void FishEngine::Script::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Behaviour::Serialize(archive);
		//archive.EndClass();
	}

	void FishEngine::Script::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Behaviour::Deserialize(archive);
		//archive.EndClass();
	}

  
	// FishEngine::Int4
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Int4 const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("x", value.x); // int
		archive << FishEngine::make_nvp("y", value.y); // int
		archive << FishEngine::make_nvp("z", value.z); // int
		archive << FishEngine::make_nvp("w", value.w); // int
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Int4 & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("x", value.x); // int
		archive >> FishEngine::make_nvp("y", value.y); // int
		archive >> FishEngine::make_nvp("z", value.z); // int
		archive >> FishEngine::make_nvp("w", value.w); // int
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Frustum
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Frustum const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("fov", value.fov); // float
		archive << FishEngine::make_nvp("maxRange", value.maxRange); // float
		archive << FishEngine::make_nvp("minRange", value.minRange); // float
		archive << FishEngine::make_nvp("aspect", value.aspect); // float
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Frustum & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("fov", value.fov); // float
		archive >> FishEngine::make_nvp("maxRange", value.maxRange); // float
		archive >> FishEngine::make_nvp("minRange", value.minRange); // float
		archive >> FishEngine::make_nvp("aspect", value.aspect); // float
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Int3
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Int3 const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("x", value.x); // int
		archive << FishEngine::make_nvp("y", value.y); // int
		archive << FishEngine::make_nvp("z", value.z); // int
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Int3 & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("x", value.x); // int
		archive >> FishEngine::make_nvp("y", value.y); // int
		archive >> FishEngine::make_nvp("z", value.z); // int
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Int2
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Int2 const & value )
	{
		archive.BeginClass();
		archive << FishEngine::make_nvp("x", value.x); // int
		archive << FishEngine::make_nvp("y", value.y); // int
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Int2 & value )
	{
		archive.BeginClass();
		archive >> FishEngine::make_nvp("x", value.x); // int
		archive >> FishEngine::make_nvp("y", value.y); // int
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::Camera
	void FishEngine::Camera::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Behaviour::Serialize(archive);
		archive << FishEngine::make_nvp("m_fieldOfView", m_fieldOfView); // float
		archive << FishEngine::make_nvp("m_orthographicSize", m_orthographicSize); // float
		archive << FishEngine::make_nvp("m_aspect", m_aspect); // float
		archive << FishEngine::make_nvp("m_isAspectSet", m_isAspectSet); // bool
		archive << FishEngine::make_nvp("m_farClipPlane", m_farClipPlane); // float
		archive << FishEngine::make_nvp("m_nearClipPlane", m_nearClipPlane); // float
		archive << FishEngine::make_nvp("m_viewport", m_viewport); // FishEngine::Vector4
		archive << FishEngine::make_nvp("m_isDirty", m_isDirty); // bool
		archive << FishEngine::make_nvp("m_cameraType", m_cameraType); // FishEngine::CameraType
		archive << FishEngine::make_nvp("m_orthographic", m_orthographic); // bool
		//archive.EndClass();
	}

	void FishEngine::Camera::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Behaviour::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_fieldOfView", m_fieldOfView); // float
		archive >> FishEngine::make_nvp("m_orthographicSize", m_orthographicSize); // float
		archive >> FishEngine::make_nvp("m_aspect", m_aspect); // float
		archive >> FishEngine::make_nvp("m_isAspectSet", m_isAspectSet); // bool
		archive >> FishEngine::make_nvp("m_farClipPlane", m_farClipPlane); // float
		archive >> FishEngine::make_nvp("m_nearClipPlane", m_nearClipPlane); // float
		archive >> FishEngine::make_nvp("m_viewport", m_viewport); // FishEngine::Vector4
		archive >> FishEngine::make_nvp("m_isDirty", m_isDirty); // bool
		archive >> FishEngine::make_nvp("m_cameraType", m_cameraType); // FishEngine::CameraType
		archive >> FishEngine::make_nvp("m_orthographic", m_orthographic); // bool
		//archive.EndClass();
	}

  
	// FishEngine::Scene
	FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, FishEngine::Scene const & value )
	{
		archive.BeginClass();
		archive.EndClass();
		return archive;
	}

	FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, FishEngine::Scene & value )
	{
		archive.BeginClass();
		archive.EndClass();
		return archive;
	}

  
	// FishEngine::MeshRenderer
	void FishEngine::MeshRenderer::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Renderer::Serialize(archive);
		//archive.EndClass();
	}

	void FishEngine::MeshRenderer::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Renderer::Deserialize(archive);
		//archive.EndClass();
	}

  
	// FishEngine::Transform
	void FishEngine::Transform::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Component::Serialize(archive);
		archive << FishEngine::make_nvp("m_localPosition", m_localPosition); // FishEngine::Vector3
		archive << FishEngine::make_nvp("m_localScale", m_localScale); // FishEngine::Vector3
		archive << FishEngine::make_nvp("m_localRotation", m_localRotation); // FishEngine::Quaternion
		archive << FishEngine::make_nvp("m_parent", m_parent); // std::weak_ptr<Transform>
		archive << FishEngine::make_nvp("m_children", m_children); // std::list<std::weak_ptr<Transform> >
		//archive.EndClass();
	}

	void FishEngine::Transform::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Component::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_localPosition", m_localPosition); // FishEngine::Vector3
		archive >> FishEngine::make_nvp("m_localScale", m_localScale); // FishEngine::Vector3
		archive >> FishEngine::make_nvp("m_localRotation", m_localRotation); // FishEngine::Quaternion
		archive >> FishEngine::make_nvp("m_parent", m_parent); // std::weak_ptr<Transform>
		archive >> FishEngine::make_nvp("m_children", m_children); // std::list<std::weak_ptr<Transform> >
		//archive.EndClass();
	}

  
	// FishEngine::GameObject
	void FishEngine::GameObject::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		//archive.BeginClass();
		FishEngine::Object::Serialize(archive);
		archive << FishEngine::make_nvp("m_components", m_components); // std::list<ComponentPtr>
		archive << FishEngine::make_nvp("m_activeSelf", m_activeSelf); // bool
		archive << FishEngine::make_nvp("m_layer", m_layer); // int
		archive << FishEngine::make_nvp("m_tagIndex", m_tagIndex); // int
		archive << FishEngine::make_nvp("m_transform", m_transform); // TransformPtr
		//archive.EndClass();
	}

	void FishEngine::GameObject::Deserialize ( FishEngine::InputArchive & archive )
	{
		//archive.BeginClass(2);
		FishEngine::Object::Deserialize(archive);
		archive >> FishEngine::make_nvp("m_components", m_components); // std::list<ComponentPtr>
		archive >> FishEngine::make_nvp("m_activeSelf", m_activeSelf); // bool
		archive >> FishEngine::make_nvp("m_layer", m_layer); // int
		archive >> FishEngine::make_nvp("m_tagIndex", m_tagIndex); // int
		archive >> FishEngine::make_nvp("m_transform", m_transform); // TransformPtr
		//archive.EndClass();
	}


} // namespace FishEngine
