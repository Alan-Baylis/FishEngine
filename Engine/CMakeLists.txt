CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0 FATAL_ERROR)

PROJECT(FishEngine CXX)

SET(FISHENGINE_VERSION_MAJOR 0)
SET(FISHENGINE_VERSION_MINOR 1)
SET(FISHENGINE_VERSION_PATCH 0)
SET(FISHENGINE_VERSION ${FISHENGINE_VERSION_MAJOR}.${FISHENGINE_VERSION_MINOR}.${FISHENGINE_VERSION_PATCH})

# Global compile & linker flags

# Target at least C++14
set(CMAKE_CXX_STANDARD 14)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

# Output
set(CMAKE_BINARY_DIR ${CMAKE_CURRENT_LIST_DIR}/Binary)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
#set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

set(FISHENGINE_SCRIPT_ENGINE ${CMAKE_CURRENT_LIST_DIR}/../Script)

#message("lib output directory: " ${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE})

#SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/boost_1_63/)
#SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/boost_1_63/lib64-msvc-14.0)

#boost
set(Boost_USE_STATIC_LIBS       ON)
set(Boost_USE_MULTITHREADED     ON)
set(Boost_USE_STATIC_RUNTIME    OFF)
find_package(Boost 1.59 REQUIRED COMPONENTS system filesystem)
include_directories(${Boost_INCLUDE_DIRS})
MESSAGE("Found Boost: " ${Boost_INCLUDE_DIRS})

# Autodesk FBX sdk
SET( FBXSDK_DIR "" CACHE PATH "Autodesk FBX SDK root directory" )
include_directories( ${FBXSDK_DIR}/include )
IF (WIN32)
	SET( FBXSDK_LIB_DIR ${FBXSDK_DIR}/lib/vs2015/x64 )
	SET( FBXSDK_LIB_DEBUG ${FBXSDK_LIB_DIR}/debug/libfbxsdk-md.lib )
	SET( FBXSDK_LIB_RELEASE ${FBXSDK_LIB_DIR}/release/libfbxsdk-md.lib )
ELSE()
	SET( FBXSDK_LIB_DIR ${FBXSDK_DIR}/lib/clang )
	SET( FBXSDK_LIB_DEBUG ${FBXSDK_LIB_DIR}/debug/libfbxsdk.a )
	SET( FBXSDK_LIB_RELEASE ${FBXSDK_LIB_DIR}/release/libfbxsdk.a )
ENDIF()
IF(NOT EXISTS ${FBXSDK_LIB_DEBUG})
	MESSAGE(FATAL_ERROR "${FBXSDK_LIB_DEBUG} not found")
ENDIF ()

IF(NOT EXISTS ${FBXSDK_LIB_RELEASE})
	MESSAGE(FATAL_ERROR "${FBXSDK_LIB_RELEASE} not found")
ENDIF ()
SET( FBXSDK_LIB debug ${FBXSDK_LIB_DEBUG} optimized ${FBXSDK_LIB_RELEASE} )


# fmod
SET( FMOD_DIR ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/fmod)
include_directories( ${FMOD_DIR}/include )
IF (WIN32)
	SET( FMOD_LIB_DEBUG ${FMOD_DIR}/lib/fmodL64_vc.lib)
	SET( FMOD_LIB_RELEASE ${FMOD_DIR}/lib/fmod64_vc.lib)
ELSE()
	SET( FMOD_LIB_DEBUG ${FMOD_DIR}/lib/libfmodL.dylib)
	SET( FMOD_LIB_RELEASE ${FMOD_DIR}/lib/libfmod.dylib)
ENDIF()
SET( FMOD_LIB debug ${FMOD_LIB_DEBUG} optimized ${FMOD_LIB_RELEASE} )

# python27
# SET( PYTHON27_DIR ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/python27 )
# include_directories( ${PYTHON27_DIR}/include )
# IF (WIN32)
# 	SET( PYTHON27_LIB debug ${PYTHON27_DIR}/libs/python27.lib optimized ${PYTHON27_DIR}/libs/python27.lib )
# ELSE()
# 	SET( PYTHON27_LIB ${PYTHON27_DIR}/lib/libpython27.a )
# ENDIF()
SET( PYTHON35_DIR ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/python35 )
include_directories( ${PYTHON35_DIR}/include )
IF (WIN32)
	SET( PYTHON35_LIB debug ${PYTHON35_DIR}/libs/python35.lib optimized ${PYTHON35_DIR}/libs/python35.lib )
ELSE()
	SET( PYTHON35_LIB ${PYTHON35_DIR}/lib/libpython35.a )
ENDIF()

include_directories(./Source/Runtime)
include_directories(./ThirdParty/)
#include_directories(./ThirdParty/PVR/Framework)
#include_directories(./ThirdParty/PhysXSDK/Include/)
#include_directories(./ThirdParty/assimp/include)

# glfw
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_INSTALL OFF CACHE BOOL "" FORCE)
ADD_SUBDIRECTORY(./ThirdParty/glfw/)
include_directories(./ThirdParty/glfw/include)
SET_TARGET_PROPERTIES(glfw PROPERTIES FOLDER "ThirdParty")

if (MSVC)
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251" )
	add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
	include_directories(./ThirdParty/glew/include)
	#set(BUILD_UTILS OFF CACHE BOOL "" FORCE)
	ADD_SUBDIRECTORY(./ThirdParty/glew/build/cmake)

	# set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
	# set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
	# set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
	# set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
	SET_TARGET_PROPERTIES(glew PROPERTIES FOLDER "ThirdParty/glew")
	SET_TARGET_PROPERTIES(glew_s PROPERTIES FOLDER "ThirdParty/glew")
else()
	#ADD_SUBDIRECTORY(./ThirdParty/glfw/)
	#SET_TARGET_PROPERTIES(glfw PROPERTIES FOLDER "ThirdParty")
	#include_directories(./ThirdParty/glfw/include)
	# link_directories(${CMAKE_CURRENT_LIST_DIR}/ThirdParty/libs/osx/)
endif()

include_directories(./ThirdParty/yaml-cpp/include)
set(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "" FORCE)
#set(BUILD_SHARED_LIBS ON CACHE BOOL "" FORCE)
ADD_SUBDIRECTORY(./ThirdParty/yaml-cpp)
SET_TARGET_PROPERTIES(yaml-cpp PROPERTIES FOLDER "ThirdParty/yaml-cpp")
SET_TARGET_PROPERTIES(format PROPERTIES FOLDER "ThirdParty/yaml-cpp")


#set(GLEW_LIBRARIES ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/glew-2.0.0/lib/Release/Win32/glew32.lib)
#IF(NOT EXISTS ${GLEW_LIBRARIES})
#    message(FATAL_ERROR "GLEW lib does not exist: ${GLEW_LIBRARIES}")
#endif ()

# set(ASSIMP_NO_EXPORT ON CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_SAMPLES OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_3DS_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_3D_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_3MF_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_AC_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_ASE_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_ASSBIN_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_ASSXML_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_B3D_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_BLEND_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_BVH_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_COB_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_COLLADA_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_CSM_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_DXF_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_GLTF_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_HMP_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_IFC_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_IRRMESH_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_IRR_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_LWO_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_LWS_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_MD2_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_MD3_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_MD5_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_MDC_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_MDL_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_MS3D_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_NDO_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_NFF_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_OFF_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_OGRE_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_OPENGEX_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_PLY_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_Q3BSP_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_Q3D_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_RAW_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_SIB_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_SMD_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_STL_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_TERRAGEN_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_XGL_IMPORTER OFF CACHE BOOL "" FORCE)
# set(ASSIMP_BUILD_X_IMPORTER OFF CACHE BOOL "" FORCE)
# set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)

# if (MSVC)
#     set(ASSIMP_BUILD_ZLIB ON CACHE BOOL "" FORCE)
# endif()

# set( CMAKE_BUILD_TYPE_COPY "${CMAKE_BUILD_TYPE}")
# set( CMAKE_BUILD_TYPE "Release")
# ADD_SUBDIRECTORY(./ThirdParty/assimp)
# SET_TARGET_PROPERTIES(assimp PROPERTIES FOLDER "ThirdParty")
# set( CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE_COPY} )

SET( PhysX_ROOT_DIR "" CACHE PATH "PhysXSDK root directory" )
include_directories( ${PhysX_ROOT_DIR}/Include )
include_directories( ${PhysX_ROOT_DIR}/../ )

if (MSVC)
	#SET_TARGET_PROPERTIES(zlibstatic PROPERTIES FOLDER "ThirdParty")
	#SET_TARGET_PROPERTIES(UpdateAssimpLibsDebugSymbolsAndDLLs PROPERTIES FOLDER "ThirdParty")
	#target_link_libraries(FishEditor opengl32.lib)
	# PhysXSDK
	# set(PhysX_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/PhysXSDK)
	set(PhysXSDK_LIBRARIES_DIR ${PhysX_ROOT_DIR}/Lib/vc14win64)
	set(PhysXSDK_LIBRARIES "")
	foreach(x PhysX3 PhysX3Common PhysX3Cooking)
		set(lib1 ${PhysXSDK_LIBRARIES_DIR}/${x}DEBUG_x64.lib)
		set(lib2 ${PhysXSDK_LIBRARIES_DIR}/${x}CHECKED_x64.lib)
		IF(NOT EXISTS ${lib1})
			message(FATAL_ERROR "physx root directory does not exist: ${lib1}")
		endif ()
		IF(NOT EXISTS ${lib2})
			message(FATAL_ERROR "physx root directory does not exist: ${lib2}")
		endif ()
		list (APPEND PhysXSDK_LIBRARIES debug ${lib1} optimized ${lib2})
	endforeach()
	foreach(x PhysX3Extensions PhysX3Vehicle PhysXProfileSDK PhysXVisualDebuggerSDK PxTask)
		set(lib1 ${PhysXSDK_LIBRARIES_DIR}/${x}DEBUG.lib)
		set(lib2 ${PhysXSDK_LIBRARIES_DIR}/${x}CHECKED.lib)
		IF(NOT EXISTS ${lib1})
			message(FATAL_ERROR "physx root directory does not exist: ${lib1}")
		endif ()
		IF(NOT EXISTS ${lib2})
			message(FATAL_ERROR "physx root directory does not exist: ${lib2}")
		endif ()
		list (APPEND PhysXSDK_LIBRARIES debug ${lib1} optimized ${lib2})
	endforeach()
else()
	FILE(GLOB PhysXSDK_LIBRARIES ${PhysX_ROOT_DIR}/Lib/osx64/*.a)
endif()

add_definitions(-DFishEngine_SHARED_LIB=1)

ADD_SUBDIRECTORY(./Source/Runtime)
ADD_SUBDIRECTORY(./Source/Game)
ADD_SUBDIRECTORY(./Source/Editor)
ADD_SUBDIRECTORY(./Source/Tool)
ADD_SUBDIRECTORY(./Source/Test)