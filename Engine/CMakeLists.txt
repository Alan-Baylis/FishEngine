CMAKE_MINIMUM_REQUIRED(VERSION 2.8.6)

PROJECT(FishEngine CXX)

SET(FISHENGINE_VERSION_MAJOR 0)
SET(FISHENGINE_VERSION_MINOR 1)
SET(FISHENGINE_VERSION_PATCH 0)
SET(FISHENGINE_VERSION ${FISHENGINE_VERSION_MAJOR}.${FISHENGINE_VERSION_MINOR}.${FISHENGINE_VERSION_PATCH})

# Global compile & linker flags
## Compiler-agnostic settings
### Target at least C++14
set(CMAKE_CXX_STANDARD 14)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

# Output

set(CMAKE_BINARY_DIR ${CMAKE_CURRENT_LIST_DIR}/Binary)
# message("HHHHHHHHH" ${CMAKE_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
#set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

#boost
set(Boost_USE_STATIC_LIBS       ON) # find static libs
set(Boost_USE_MULTITHREADED     ON)
set(Boost_USE_STATIC_RUNTIME    OFF)
find_package(Boost 1.59 REQUIRED
    COMPONENTS
    system
    filesystem)
include_directories(${Boost_INCLUDE_DIRS})

#message("HHHHHHHHHH" ${Boost_INCLUDE_DIRS})

include_directories(./Source/Runtime)
#include_directories(./ThirdParty/boost_1_61_0/)
include_directories(./ThirdParty/)
include_directories(./ThirdParty/PhysXSDK/Include/)
include_directories(./ThirdParty/assimp-3.3.1/include)

set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)


if (MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
    include_directories(./ThirdParty/glew-2.0.0/include)
    set(BUILD_UTILS OFF CACHE BOOL "" FORCE)
    ADD_SUBDIRECTORY(./ThirdParty/glew-2.0.0/build/cmake)
    ADD_SUBDIRECTORY(./ThirdParty/glfw-3.2.1/)
    include_directories(./ThirdParty/glfw-3.2.1/include)
	# set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
	# set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
	# set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
	# set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
    SET_TARGET_PROPERTIES(glew PROPERTIES FOLDER "ThirdParty")
    SET_TARGET_PROPERTIES(glew_s PROPERTIES FOLDER "ThirdParty")
else()
    ADD_SUBDIRECTORY(./ThirdParty/glfw/)
    # SET_TARGET_PROPERTIES(glfw PROPERTIES FOLDER "ThirdParty")
    include_directories(./ThirdParty/glfw/include)
    # link_directories(${CMAKE_CURRENT_LIST_DIR}/ThirdParty/libs/osx/)
endif()

ADD_SUBDIRECTORY(./ThirdParty/imgui)
SET_TARGET_PROPERTIES(imgui PROPERTIES FOLDER "ThirdParty")

include_directories(./ThirdParty/nativefiledialog/src/include)
ADD_SUBDIRECTORY(./ThirdParty/nativefiledialog)
SET_TARGET_PROPERTIES(nativefiledialog PROPERTIES FOLDER "ThirdParty")

#set(GLEW_LIBRARIES ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/glew-2.0.0/lib/Release/Win32/glew32.lib)
#IF(NOT EXISTS ${GLEW_LIBRARIES})
#    message(FATAL_ERROR "GLEW lib does not exist: ${GLEW_LIBRARIES}")
#endif ()

set(ASSIMP_NO_EXPORT ON CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_SAMPLES OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_3DS_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_3D_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_3MF_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_AC_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_ASE_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_ASSBIN_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_ASSXML_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_B3D_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_BLEND_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_BVH_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_COB_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_COLLADA_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_CSM_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_DXF_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_GLTF_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_HMP_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_IFC_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_IRRMESH_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_IRR_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_LWO_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_LWS_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_MD2_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_MD3_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_MD5_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_MDC_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_MDL_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_MS3D_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_NDO_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_NFF_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_OFF_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_OGRE_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_OPENGEX_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_PLY_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_Q3BSP_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_Q3D_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_RAW_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_SIB_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_SMD_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_STL_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_TERRAGEN_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_XGL_IMPORTER OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_X_IMPORTER OFF CACHE BOOL "" FORCE)
set(BUILD_SHARED_LIBS ON CACHE BOOL "" FORCE)
ADD_SUBDIRECTORY(./ThirdParty/assimp-3.3.1)
SET_TARGET_PROPERTIES(assimp PROPERTIES FOLDER "ThirdParty")
SET_TARGET_PROPERTIES(zlibstatic PROPERTIES FOLDER "ThirdParty")
SET_TARGET_PROPERTIES(UpdateAssimpLibsDebugSymbolsAndDLLs PROPERTIES FOLDER "ThirdParty")

if (MSVC)
    #target_link_libraries(FishEditor opengl32.lib)
    # PhysXSDK
    set(PhysXSDK_ROOT ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/PhysXSDK)
    set(PhysXSDK_LIBRARIES_DIR ${PhysXSDK_ROOT}/Lib/vc14win64)
    set(PhysXSDK_LIBRARIES "")
    foreach(x PhysX3 PhysX3Common PhysX3Cooking)
        set(lib1 ${PhysXSDK_LIBRARIES_DIR}/${x}DEBUG_x64.lib)
        set(lib2 ${PhysXSDK_LIBRARIES_DIR}/${x}CHECKED_x64.lib)
        IF(NOT EXISTS ${lib1})
            message(FATAL_ERROR "physx root directory does not exist: ${lib1}")
        endif ()
        IF(NOT EXISTS ${lib2})
            message(FATAL_ERROR "physx root directory does not exist: ${lib2}")
        endif ()
        list (APPEND PhysXSDK_LIBRARIES debug ${lib1} optimized ${lib2})
    endforeach()
    foreach(x PhysX3Extensions PhysX3Vehicle PhysXProfileSDK PhysXVisualDebuggerSDK PxTask)
        set(lib1 ${PhysXSDK_LIBRARIES_DIR}/${x}DEBUG.lib)
        set(lib2 ${PhysXSDK_LIBRARIES_DIR}/${x}CHECKED.lib)
        IF(NOT EXISTS ${lib1})
            message(FATAL_ERROR "physx root directory does not exist: ${lib1}")
        endif ()
        IF(NOT EXISTS ${lib2})
            message(FATAL_ERROR "physx root directory does not exist: ${lib2}")
        endif ()
        list (APPEND PhysXSDK_LIBRARIES debug ${lib1} optimized ${lib2})
    endforeach()
else()
    FILE(GLOB PhysXSDK_LIBRARIES ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/PhysXSDK/Lib/osx64/*.a)
endif()

ADD_SUBDIRECTORY(./Source/Runtime)
ADD_SUBDIRECTORY(./Source/Editor)
ADD_SUBDIRECTORY(./Source/Tool)
ADD_SUBDIRECTORY(./Source/Test)