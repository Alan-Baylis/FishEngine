PROJECT(boost)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.6)

IF(COMMAND cmake_policy)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

OPTION(BOOST_BUILD_SHARED_LIB "Build shared libs" OFF)
OPTION(BOOST_WITH_FILESYSTEM "Build with filesystem" ON)
#OPTION(BOOST_WITH_PROGRAM_OPTIONS "Build with program_options" OFF)
OPTION(BOOST_WITH_SYSTEM "Build with system" ON)
#OPTION(BOOST_WITH_TEST "Build with test" OFF)

SET(BOOST_MAJOR_VERSION 1)
SET(BOOST_MINOR_VERSION 63)
SET(BOOST_VERSION ${BOOST_MAJOR_VERSION}.${BOOST_MINOR_VERSION})

SET(Boost_VERSION ${BOOST_VERSION} CACHE INTERNAL Boost_VERSION)
SET(Boost_LIB_VERSION ${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION} CACHE INTERNAL Boost_LIB_VERSION)

SET(BOOST_PROJECT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/..")
SET(FISHENGINE_ROOT_DIR "${BOOST_PROJECT_DIR}/../..")

SET(Boost_INCLUDE_DIRS ${BOOST_PROJECT_DIR} CACHE INTERNAL Boost_INCLUDE_DIRS)

INCLUDE(${FISHENGINE_ROOT_DIR}/cmake/Common.cmake)
INCLUDE(${FISHENGINE_ROOT_DIR}/cmake/Platform.cmake)
INCLUDE(${FISHENGINE_ROOT_DIR}/cmake/Compiler.cmake)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

#SET(BOOST_OUTPUT_DIR "${BOOST_PROJECT_DIR}/lib/${FISHENGINE_PLATFORM_NAME}")
#SET(FISHENGINE_BIN_DIR "${FISHENGINE_ROOT_DIR}/KlayGE/bin/${FISHENGINE_PLATFORM_NAME}")

#SET( Boost_LIBRARY_DIRS ${BOOST_OUTPUT_DIR} CACHE INTERNAL Boost_LIBRARY_DIRS)

#INCLUDE(${FISHENGINE_ROOT_DIR}/cmake/ConfigBoost.cmake)

IF(MSVC)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W3 /WX-")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /WX-")
ELSE()
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-error")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error")
ENDIF()

IF(FISHENGINE_PLATFORM_WINDOWS_RUNTIME)
	ADD_DEFINITIONS(-DBOOST_NO_ANSI_APIS)
ENDIF()
IF(CMAKE_GENERATOR MATCHES "ARM")
	ADD_DEFINITIONS(-D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE)
ENDIF()
IF(MSVC)
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
	ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
ENDIF()
IF(MINGW)
	IF(FISHENGINE_ARCH_NAME STREQUAL "x64")
		ADD_DEFINITIONS(-DBOOST_USE_WINDOWS_H)
	ENDIF()
ENDIF()
IF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
	ADD_DEFINITIONS(-DBOOST_USE_WINDOWS_H)
ENDIF()

#IF(FISHENGINE_PREFERRED_LIB_TYPE STREQUAL "SHARED")
IF( BOOST_BUILD_SHARED_LIB )
	ADD_DEFINITIONS(-DBOOST_DYN_LINK=1)
	SET( LIB_PREFIX "" )
	SET( BOOST_LIB_TYPE "STATIC")
	IF(MSVC)
		SET(ABI_SUFFIX_DEBUG "-gd")
	ELSE()
		SET(ABI_SUFFIX_DEBUG "-d")
	ENDIF()
	SET(ABI_SUFFIX_OPTIMIZED "")
ELSE()
	ADD_DEFINITIONS(-DBOOST_STATIC_LINK=1)
	SET( LIB_PREFIX "lib")
	SET( BOOST_LIB_TYPE "STATIC")
	IF(MSVC)
		SET(ABI_SUFFIX_DEBUG "-sgd")
	ELSE()
		SET(ABI_SUFFIX_DEBUG "-sd")
	ENDIF()
	SET(ABI_SUFFIX_OPTIMIZED "-s")
ENDIF()

# SET(BOOST_LIB_NAME_SUFFIX_DEBUG -${FISHENGINE_COMPILER_NAME}${FISHENGINE_COMPILER_VERSION}-mt${ABI_SUFFIX_DEBUG}-${Boost_LIB_VERSION})
# SET(BOOST_LIB_NAME_SUFFIX_OPTIMIZED -${FISHENGINE_COMPILER_NAME}${FISHENGINE_COMPILER_VERSION}-mt${ABI_SUFFIX_OPTIMIZED}-${Boost_LIB_VERSION})

MACRO(SETUP_BOOST_LIBRARY LIB_NAME)
	SOURCE_GROUP("Source Files" FILES ${SOURCE_FILES})

	INCLUDE_DIRECTORIES(${BOOST_PROJECT_DIR}/)
	#LINK_DIRECTORIES(${BOOST_PROJECT_DIR}/lib/${FISHENGINE_PLATFORM_NAME})

	ADD_LIBRARY( ${LIB_NAME} ${BOOST_LIB_TYPE} ${SOURCE_FILES} )

	# SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
	# 	ARCHIVE_OUTPUT_DIRECTORY ${BOOST_OUTPUT_DIR}
	# 	ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${BOOST_OUTPUT_DIR}
	# 	ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${BOOST_OUTPUT_DIR}
	# 	ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${BOOST_OUTPUT_DIR}
	# 	ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${BOOST_OUTPUT_DIR}
	# 	PROJECT_LABEL ${LIB_NAME}
	# 	DEBUG_POSTFIX ""
	# 	# DEBUG_OUTPUT_NAME ${LIB_PREFIX}boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_DEBUG}
	# 	# RELEASE_OUTPUT_NAME ${LIB_PREFIX}boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
	# 	# RELWITHDEBINFO_OUTPUT_NAME ${LIB_PREFIX}boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
	# 	# MINSIZEREL_OUTPUT_NAME ${LIB_PREFIX}boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
	# )
	# IF(FISHENGINE_PLATFORM_DARWIN OR FISHENGINE_PLATFORM_LINUX)
	# 	SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
	# 		LIBRARY_OUTPUT_DIRECTORY ${FISHENGINE_BIN_DIR}
	# 		LIBRARY_OUTPUT_DIRECTORY_DEBUG ${FISHENGINE_BIN_DIR}
	# 		LIBRARY_OUTPUT_DIRECTORY_RELEASE ${FISHENGINE_BIN_DIR}
	# 		LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FISHENGINE_BIN_DIR}
	# 		LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${FISHENGINE_BIN_DIR})
	# ENDIF()

	TARGET_LINK_LIBRARIES(${LIB_NAME}
		${EXTRA_LINKED_LIBRARIES})

	# IF(FISHENGINE_PLATFORM_WINDOWS)
	# 	INSTALL(TARGETS ${LIB_NAME}
	# 		RUNTIME DESTINATION ${FISHENGINE_BIN_DIR}
	# 		LIBRARY DESTINATION ${FISHENGINE_BIN_DIR}
	# 	)
	# ENDIF()
	SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES FOLDER "ThirdParty/Boost")
ENDMACRO()

IF(BOOST_WITH_FILESYSTEM)
	ADD_SUBDIRECTORY(filesystem)
ENDIF()
# IF(BOOST_WITH_PROGRAM_OPTIONS)
# 	ADD_SUBDIRECTORY(program_options)
# ENDIF()
IF(BOOST_WITH_SYSTEM)
	ADD_SUBDIRECTORY(system)
ENDIF()
# IF(BOOST_WITH_TEST)
# 	ADD_SUBDIRECTORY(test)
# ENDIF()
