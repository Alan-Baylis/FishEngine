///Normalmap On
#include <UnrealSupport.inc>
#include <BRDF.inc>
#include <ShadingModels.inc>

// uniform vec3 BaseColor;
// uniform float Metallic;
// uniform float Roughness;
uniform float Specular;

uniform sampler2D AlbedoMap;
uniform sampler2D GlossMap;
uniform sampler2D MaskMap;
//uniform sampler2D NormalMap;

uniform samplerCube RadianceMap;
uniform samplerCube IrradianceMap;

// http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
vec3 fix_cube_lookup( vec3 v, float cube_size, float lod )
{
	float M = max(max(abs(v.x), abs(v.y)), abs(v.z));
	float scale = 1 - exp2(lod) / cube_size;
	if (abs(v.x) != M) v.x *= scale;
	if (abs(v.y) != M) v.y *= scale;
	if (abs(v.z) != M) v.z *= scale;
	return v;
}

struct StandardMaterial
{
	vec3 BaseColor;
	float Metallic;
	float Roughness;
	float Specular;
};

StandardMaterial PrepareMaterial(SurfaceData s)
{
	//return StandardMaterial(BaseColor, Metallic, Roughness, Specular);
	StandardMaterial m;
	m.BaseColor = texture(AlbedoMap, s.uv).rgb;
	m.Metallic = texture(MaskMap, s.uv).b;
	m.Roughness = 1 - texture(GlossMap, s.uv).r;
	m.Specular = Specular;
	return m;
}

vec4 ps_main(SurfaceData surfaceData)
{
	vec4 outColor;
	vec3 L = surfaceData.L;
	vec3 V = surfaceData.V;
	vec3 N = surfaceData.N;
	StandardMaterial m = PrepareMaterial(surfaceData);
	vec3 DiffuseColor = m.BaseColor - m.BaseColor * m.Metallic;
	vec3 SpecularColor = mix( vec3(0.08 * m.Specular), m.BaseColor, m.Metallic);
	float NoL = saturate( dot(N, L) );
	outColor.rgb = PI * LightColor0.rgb * NoL * StandardShading(DiffuseColor, SpecularColor, vec3(m.Roughness, m.Roughness, m.Roughness), vec3(1), L, V, N);
	float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	const int numMips   = 6;
	float mip           = numMips - 1 + log2(m.Roughness);
	vec3 lookup         = -reflect(V, N);
	//lookup              = fix_cube_lookup(lookup, 512, mip);
	//vec3 radiance       = pow(textureLod(RadianceMap, lookup, mip).rgb, vec3(2.2));
	//vec3 irradiance     = pow(texture(IrradianceMap, N).rgb, vec3(2.2));
	vec3 radiance       = textureLod(RadianceMap, lookup, mip).rgb;
	vec3 irradiance     = texture(IrradianceMap, N).rgb;

	vec3 reflectance    = EnvBRDFApprox(SpecularColor, m.Roughness, NoV);
	vec3 diffuse        = DiffuseColor * irradiance;
	vec3 specular       = radiance * reflectance;
	//outColor.rgb       += pow(diffuse + specular, vec3(1.0/2.2));
	outColor.rgb       += diffuse + specular;
	//SpecularColor = EnvBRDFApprox(SpecularColor, Roughness, NoV);
	//vec3 diffuse = Diffuse

	//color.rgb = StandardShading(DiffuseColor, SpecularColor, vec3(Roughness, Roughness, Roughness), vec3(1), L, V, N, vec2(1));
	//color.rgb = pow(color.rgb, vec3(1.0 / 2.2));
	//outColor.rgb = N * 0.5 + 0.5;
	outColor.a = 1.0f;
	return outColor;
}
