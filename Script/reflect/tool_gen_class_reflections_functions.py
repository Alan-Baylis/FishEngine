from mako.template import Template
import json
from tool_helper import UpdateFile

serialization_template_str = '''
/**************************************************
* auto generated by reflection system
**************************************************/

#include <Serialization.hpp>
#include <Archive.hpp>
${headers}

namespace ${scope}
{
	${serialize_functions}
} // namespace ${scope}
'''
serialization_template = Template(serialization_template_str)

serialization_function_template_str = '''
	// ${T}
	void ${T}::Serialize ( FishEngine::OutputArchive & archive ) const
	{
		${serialize_seqs}
	}

	void ${T}::Deserialize ( FishEngine::InputArchive & archive )
	{
		${deserialize_seqs}
	}
'''
serialization_function_template = Template(serialization_function_template_str)

serialization_function_template_str2 = '''
    // ${T}
    FishEngine::OutputArchive & operator << ( FishEngine::OutputArchive & archive, ${T} const & value )
    {
        Prologue(archive, value);
        ${serialize_seqs}
        Epilogue(archive, value);
        return archive;
    }

    FishEngine::InputArchive & operator >> ( FishEngine::InputArchive & archive, ${T} & value )
    {
        Prologue(archive, value);
        ${deserialize_seqs}
        Epilogue(archive, value);
        return archive;
    }
'''
serialization_function_template2 = Template(serialization_function_template_str2)

skip_types = ()

def GenSerializationFuncionts_polymorphic(classinfo, key, scope):
    c = classinfo[key]
    #headers.append(c['header_file'])
    serialize_seqs_list = [x for x in c['members'] if not x['NonSerializable']]
    serialize_seqs = ['archive << FishEngine::make_nvp("{0}", {0}); // {1}'.format(x['name'], x['type']) for x in serialize_seqs_list]
    if 'parent' in c:
        p = 'archive << FishEngine::BaseClassWrapper<{0}>(*this);'.format(c['parent'])
        serialize_seqs.insert(0, p)
    serialize_seqs = '\n\t\t'.join(serialize_seqs)
    deserialize_seqs = serialize_seqs.replace('<<', '>>')
    return serialization_function_template.render(namespace=c['scope_prefix'], T=key, serialize_seqs=serialize_seqs, deserialize_seqs=deserialize_seqs)

def GenSerializationFuncionts_nonpolymorphic(classinfo, key, scope):
    c = classinfo[key]
    #headers.append(c['header_file'])
    serialize_seqs_list = [x for x in c['members'] if not x['NonSerializable']]
    serialize_seqs = ['archive << FishEngine::make_nvp("{0}", value.{0}); // {1}'.format(x['name'], x['type']) for x in serialize_seqs_list]
    if 'parent' in c:
        p = 'archive << FishEngine::BaseClassWrapper<{0}>(*this);'.format(c['parent'])
        serialize_seqs.insert(0, p)
    serialize_seqs = '\n\t\t'.join(serialize_seqs)
    deserialize_seqs = serialize_seqs.replace('<<', '>>')
    return serialization_function_template2.render(namespace=c['scope_prefix'], T=key, serialize_seqs=serialize_seqs, deserialize_seqs=deserialize_seqs)


def GenSerializationFunctions(classinfo, scope):

    def IsObject(name):
        if name == "FishEngine::Object":
            return True
        if 'parent' not in class_info[name]:
            return False
        return IsObject(class_info[name]['parent'])

    headers = []
    functions = []
    visited = set()
    # def register(classname):
    #     if classname in visited:
    #         return
    #     c = classinfo[classname]
    #     visited.add(classname)

    for key in classinfo.keys():
        #register(key)
        if key in skip_types:
            continue
        c = classinfo[key]
        headers.append(c['header_file'])
        if IsObject(key):
            f = GenSerializationFuncionts_polymorphic(classinfo, key, scope)
        else:
            f = GenSerializationFuncionts_nonpolymorphic(classinfo, key, scope)
        functions.append( f )

    headers = '\n'.join(['#include "../{}"'.format(x) for x in headers])
    serialize_functions = '\n'.join(functions)
    return serialization_template.render(headers = headers, scope = scope,
        serialize_functions=serialize_functions)

#register_teamplate
componentInheritance_template_str = '''
static std::map<std::string, std::string> s_componentInheritance =
{
    ${pairs}
};
'''

classname_template_str = '''

'''

def GenComponentInheritance(class_info):
    def IsComponent(name):
        #print(name)
        if name == "Component":
            return True
        if 'parent' not in class_info[name]:
            return False
        return IsComponent(class_info[name]['parent'])

    pairs = []
    for key in class_info.keys():
        if "Component" == key:
             pairs.append((key, ''))
        elif IsComponent(key):
            pairs.append((key, class_info[key]['parent']))
    pairs = ['{{ClassID<{0}>(), ClassID<{1}>()}},'.format(x, y) for (x, y) in pairs]
    #print(pairs)
    print(Template(componentInheritance_template_str).render(pairs='\n\t'.join(pairs)))

DynamicSerializeObject_template_str = '''
namespace ${scope}
{
    template<class Archive>
    static void DynamicSerializeObject(Archive & archive, std::shared_ptr<FishEngine::Object> obj)
    {
        const int id = obj->ClassID();
        switch (id)
        {
        ${dynamic_seqs};
        default:
            abort();
        }
    }
} // end of namespace ${scope}
'''

DynamicSerializeObject_seq = '''
        case FishEngine::ClassID<{0}>():
            archive << *std::dynamic_pointer_cast<{0}>(obj);
            break;'''

def Gen_DynamicSerializeObject(class_info, scope):
    def IsObject(name):
        if name == "FishEngine::Object":
            return True
        if 'parent' not in class_info[name]:
            return False
        return IsObject(class_info[name]['parent'])

    Objects = [ key for key in classinfo.keys() if key != "FishEngine::Object" and IsObject(key) ]
    seqs = ''.join([DynamicSerializeObject_seq.format(x) for x in Objects])
    return Template(DynamicSerializeObject_template_str).render(dynamic_seqs = seqs, scope = scope)


def GenSerialization(class_info, scope_prefix):
    filtered_class_info = {k: v for k, v in class_info.iteritems() if v['scope_prefix'].startswith(scope_prefix)}
    return GenSerializationFunctions(filtered_class_info, scope_prefix) #+ Gen_DynamicSerializeObject(filtered_class_info, scope_prefix)

def GenSerialization_Engine(class_info):
    return GenSerialization(class_info, "FishEngine")

def GenSerialization_Editor(class_info):
    return GenSerialization(class_info, "FishEditor")

if __name__ == "__main__":
    with open('temp/class.json') as f:
        class_info = json.loads(f.read())
    #GenComponentInheritance(class_info)
    UpdateFile('../../Engine/Source/Runtime/generate/EngineClassSerialization.cpp', GenSerialization_Engine(class_info))
    UpdateFile('../../Engine/Source/Editor/generate/EditorClassSerialization.cpp', GenSerialization_Editor(class_info))
    

