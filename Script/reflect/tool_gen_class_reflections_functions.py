from mako.template import Template
import json

serialization_template_str = '''
/**************************************************
* auto generated by reflection system
**************************************************/

#include <cereal/cereal.hpp>
#include <cereal/types/base_class.hpp>
#include <cereal/types/polymorphic.hpp>
#include <cereal/types/vector.hpp>
#include <cereal/types/list.hpp>
//#include "../ReflectClass.hpp"
//#include "../Archive.hpp"
//#include "../Serialization.hpp"
${headers}

${cereal_register}

namespace FishEngine
{
    class FE_EXPORT /*Meta(NonSerializable)*/ Serialization
    {
    public:
        Serialization() = delete;

        ${serialize_functions}
    }; // end of class Serialization

    /**************************************************
    * serialization functions for cereal
    **************************************************/

    ${cereal_serialize_functions}
} // namespace FishEngine
'''
serialization_template = Template(serialization_template_str)

serialization_function_template_str = '''
        // ${T}
        template<typename Archive>
        static void Serialize(Archive& archive, ${T}& value)
        {
            ${serialize_seqs}
        }
'''
serialization_function_template = Template(serialization_function_template_str)


cereal_serialization_function_template_str = '''
    // ${T}
    template<typename Archive>
    static void serialize(Archive& archive, ${T}& value)
    {
        Serialization::Serialize(archive, value);
    }
'''
cereal_serialization_function_template = Template(cereal_serialization_function_template_str)

def GenSerializationFunctions(classinfo):
    headers = []
    functions = []
    cereal_register = []
    visited = set()
    def register(classname):
        if classname in visited:
            return
        c = classinfo[classname]
        r = 'CEREAL_REGISTER_TYPE_WITH_NAME(FishEngine::{0}, "{0}");\n'.format(classname)
        if 'parent' in c:
            register(c['parent'])
            r += 'CEREAL_REGISTER_POLYMORPHIC_RELATION(FishEngine::{0}, FishEngine::{1});\n'.format(c['parent'], classname)
        cereal_register.append(r)
        visited.add(classname)

    for key in classinfo.keys():
        register(key)
        c = classinfo[key]
        headers.append(c['header_file'])
        serialize_seqs_list = [x for x in c['members'] if not x['NonSerializable']]
        serialize_seqs = '\n\t\t\t'.join(['archive(cereal::make_nvp("{0}", value.{0})); // {1}'.format(x['name'], x['type']) for x in serialize_seqs_list])
        if 'parent' in c:
            p = 'archive(cereal::make_nvp("{0}", cereal::base_class<{0}>(&value)));\n\t\t\t'.format(c['parent'])
            serialize_seqs = p + serialize_seqs
        f = serialization_function_template.render(namespace=c['scope_prefix'], T=key, serialize_seqs=serialize_seqs)
        functions.append(f)

    headers = '\n'.join(['#include "../{}"'.format(x) for x in headers])
    serialize_functions = '\n'.join(functions)
    cereal_register = '\n'.join(cereal_register)
    cereal_serialize_functions = ''.join([cereal_serialization_function_template.render(T=x) for x in classinfo.keys()])
    return serialization_template.render(headers = headers, 
        serialize_functions=serialize_functions, 
        cereal_serialize_functions=cereal_serialize_functions,
        cereal_register=cereal_register)

#register_teamplate
componentInheritance_template_str = '''
static std::map<std::string, std::string> s_componentInheritance = {
    ${pairs}
};
'''

classname_template_str = '''

'''

def GenComponentInheritance(class_info):
    def IsComponent(name):
        #print(name)
        if name == "Component":
            return True
        if 'parent' not in class_info[name]:
            return False
        return IsComponent(class_info[name]['parent'])

    pairs = []
    for key in class_info.keys():
        if "Component" == key:
             pairs.append((key, ''))
        elif IsComponent(key):
            pairs.append((key, class_info[key]['parent']))
    pairs = ['{{"{0}", "{1}"}},'.format(x, y) for (x, y) in pairs]
    #print(pairs)
    print(Template(componentInheritance_template_str).render(pairs='\n\t'.join(pairs)))

if __name__ == "__main__":
    with open('temp/class.json') as f:
        class_info = json.loads(f.read())
    GenComponentInheritance(class_info)
    with open('../../Engine/Source/Runtime/generate/Class_Serialization.hpp', 'w') as f:
        f.write(GenSerializationFunctions(class_info))

